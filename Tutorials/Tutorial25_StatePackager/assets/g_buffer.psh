#include "structures.fxh"
#include "scene.fxh"

cbuffer cbConstants
{
    ShaderConstants g_Constants;
}

struct PSInput
{
    float4 Pos    : SV_POSITION;
    float2 ClipXY : ClipPos;
};

struct PSOutput
{
    float4 Albedo   : SV_TARGET0;
    float4 Normal   : SV_TARGET1;
    float4 Emissive : SV_TARGET2;
    float  Depth    : SV_TARGET3;
};

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float2 f2ScreenSize = float2(g_Constants.fScreenWidth, g_Constants.fScreenHeight);
    float3 f3RayStart = ScreenToWorld(PSIn.Pos.xy, 0.0, f2ScreenSize, g_Constants.ViewProjInvMat);
    float3 f3RayEnd   = ScreenToWorld(PSIn.Pos.xy, 1.0, f2ScreenSize, g_Constants.ViewProjInvMat);

    RayInfo Ray;
    Ray.Origin = f3RayStart; 
    Ray.Dir    = normalize(f3RayEnd - f3RayStart); 

    HitInfo Hit = IntersectScene(Ray);

    float3 Albedo   = float3(0.0, 0.0, 0.0);
    float3 Emissive = float3(0.0, 0.0, 0.0);
    float3 Normal   = float3(0.0, 0.0, 0.0);

    if (Hit.Type == HIT_TYPE_LAMBERTIAN)
        Albedo = Hit.Color;
    else if (Hit.Type == HIT_TYPE_DIFFUSE_LIGHT)
        Emissive = g_Constants.f4LightIntensity.rgb;

    PSOut.Albedo   = float4(Albedo, 0.0);
    PSOut.Emissive = float4(Emissive, 0.0);
    PSOut.Normal   = float4(saturate(Hit.Normal * 0.5 + 0.5), 0.0);

    if (Hit.Distance < INF)
    {
        float3 HitWorldPos = Ray.Origin + Ray.Dir * Hit.Distance;
        float4 HitClipPos = mul(float4(HitWorldPos, 1.0), g_Constants.ViewProjMat);
        PSOut.Depth = min(HitClipPos.z / HitClipPos.w, 1.0);
    }
    else
    {
        PSOut.Depth = 1.0;
    }
}
