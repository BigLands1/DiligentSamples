precision highp float;
precision highp int;
 
layout(input_attachment_index = 0, binding = 0) uniform highp subpassInput in_Color;
layout(input_attachment_index = 1, binding = 1) uniform highp subpassInput in_DepthZ;

layout(location = 0) in  vec4 in_LightLocation;
layout(location = 1) in  vec3 in_LightColor;

layout(location = 0) out vec4 out_Color;

uniform ShaderConstants
{
    mat4 g_ViewProj;
    mat4 g_ViewProjInv;
    vec4 g_ViewportSize;
    int  g_ShowLightVolumes;
};

void main()
{
    vec4 ClipSpacePos = vec4(gl_FragCoord.xy * g_ViewportSize.zw * vec2(2.0, -2.0) + vec2(-1.0, 1.0), subpassLoad(in_DepthZ).x, 1.0);
    vec4 WorldPos = ClipSpacePos * g_ViewProjInv;
    WorldPos.xyz /= WorldPos.w;
    float DistToLight = length(WorldPos.xyz - in_LightLocation.xyz);
    float LightRadius = in_LightLocation.w;
    float Attenuation = clamp(1.0 - DistToLight/LightRadius, 0.0, 1.0);
    if (Attenuation == 0.0 && g_ShowLightVolumes == 0)
        discard;

    out_Color.rgb = subpassLoad(in_Color).rgb * in_LightColor.rgb * Attenuation;
    if (g_ShowLightVolumes != 0)
        out_Color.rgb += in_LightColor.rgb * 0.05;

    out_Color.a = 1.0;
}
